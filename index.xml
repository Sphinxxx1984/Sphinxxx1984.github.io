<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sphinxxx1984 Blog</title>
    <link>https://sphinxxx1984.github.io/</link>
    <description>Recent content on Sphinxxx1984 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ch-Hans</language>
    <copyright>@2020, Xinyu Ye. All rights reserved.</copyright>
    <lastBuildDate>Sun, 13 Dec 2020 04:40:00 +0800</lastBuildDate>
    
	<atom:link href="https://sphinxxx1984.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>咖啡风味的奥秘</title>
      <link>https://sphinxxx1984.github.io/slides/coffee_flavor/</link>
      <pubDate>Sun, 13 Dec 2020 04:40:00 +0800</pubDate>
      
      <guid>https://sphinxxx1984.github.io/slides/coffee_flavor/</guid>
      <description>什么是咖啡的风味 &amp;ndash;
风味是一个笼统的概念，它实际上包括挥发性的香气、水溶性的味道和触感
&amp;ndash;
 香气：鼻前嗅觉（鼻子嗅闻）/鼻前嗅觉（通过口腔进入鼻腔）  &amp;ndash;
 水溶性的味道：酸、甜、苦共同作用  &amp;ndash;
 触感：厚薄度（Body），清爽还是浓稠  &amp;ndash;
嗅觉和味觉会共同作用
&amp;ndash;
香气、味道、触感共同构成了一种整体印象，我们把它称之为“风味”，通常用与之有关联/类似的东西来描述
&amp;ndash;
简单点说，味觉+嗅觉+触觉整体得到的所有信息叫做“风味”。
 咖啡风味的描述方式 &amp;ndash;
 一般来说，用食物类/有气味的物质来描述咖啡的香气/味道，用厚重/轻盈等词汇来描述触感。  &amp;ndash;
 咖啡的生豆/熟豆常常会有很多的风味描述词汇，一般由产地杯测师/烘焙师杯测得出。   咖啡风味轮 &amp;ndash;
  由精品咖啡协会SCA制作
  共有9大风味类别：植物与蔬菜、发酵与酸、水果、花、甜味、坚果与可可、香料、烘焙、其他
   植物与蔬菜类 &amp;ndash;
 橄榄油  &amp;ndash;
 生味（生豆味）  &amp;ndash;
 青菜/植物：未成熟、豆荚、新鲜、深绿青菜、植物、干草、草药  &amp;ndash;
 豆子   酸与发酵类 &amp;ndash;
 酸：酸香、醋酸、酪酸、异戊酸、柠檬酸、苹果酸  &amp;ndash;
 酒/发酵：红酒、威士忌、发酵、熟透   水果类 &amp;ndash;</description>
    </item>
    
    <item>
      <title>咖啡冲煮进阶</title>
      <link>https://sphinxxx1984.github.io/slides/coffee_adjustment/</link>
      <pubDate>Sun, 22 Nov 2020 12:50:00 +0800</pubDate>
      
      <guid>https://sphinxxx1984.github.io/slides/coffee_adjustment/</guid>
      <description>复习一下 &amp;ndash;
风味是一个笼统的概念，它实际上包括挥发性的香气、水溶性的味道和触感
&amp;ndash;
 香气：鼻前嗅觉（鼻子嗅闻）/鼻前嗅觉（通过口腔进入鼻腔）  &amp;ndash;
 水溶性的味道：酸、甜、苦共同作用  &amp;ndash;
 触感：厚薄度（Body），清爽还是浓稠  &amp;ndash;
嗅觉和味觉会共同作用
&amp;ndash;
香气、味道、触感共同构成了一种整体印象，我们把它称之为“风味”，通常用与之有关联/类似的东西来描述
 复习一下 &amp;ndash;
准备工作：水、咖啡豆、滤纸（消耗品）
研磨器、滤杯、分享壶、温度计、计时器、冲煮壶、秤（非消耗品）
&amp;ndash;
STEP0：烧水，处理滤纸，挑选并研磨咖啡豆
&amp;ndash;
STEP1：嗅闻干香，布粉
&amp;ndash;
STEP2：注入少量的水进行焖蒸
&amp;ndash;
STEP3：注剩余的水，等待水滤干
&amp;ndash;
STEP4：晃匀，开始品饮
 咖啡冲煮中的变量 &amp;ndash;
 水温  &amp;ndash;
 研磨度  &amp;ndash;
 粉水比  &amp;ndash;
 时间  &amp;ndash;
 滤杯  &amp;ndash;
 滤纸  &amp;ndash;
 注水方式（分布、速率）   水温 &amp;ndash;
温度越高，萃取速率越快；温度越低，萃取速率越慢。
&amp;ndash;
一般来说，浅度烘焙的咖啡豆比较耐萃，需要用较高的水温。（92-94℃）</description>
    </item>
    
    <item>
      <title>给NJU CS 18级学生的求职经验分享</title>
      <link>https://sphinxxx1984.github.io/slides/job_seeking/</link>
      <pubDate>Mon, 16 Nov 2020 02:30:00 +0800</pubDate>
      
      <guid>https://sphinxxx1984.github.io/slides/job_seeking/</guid>
      <description>求职经验分享 计算机科学与技术系 17级 叶新宇
 目录 1 自我介绍
2 求职经历分享
3 简历准备
4 面试经验
5 准备工作
6 杂谈
 自我介绍 &amp;ndash;
 计算机应用方向，GPA排名约40%  &amp;ndash;
 代码能力较强，数学能力相对一般  &amp;ndash;
 知识面宽广，前端、后端、客户端、图形学、数据科学都有涉猎  &amp;ndash;
 对科研不感兴趣，对研发类的工作有浓厚的兴趣  &amp;ndash;
 曾有两年社团负责人的经历   求职经历分享 &amp;ndash;
 实习投递公司：腾讯、阿里巴巴、网易、字节跳动  &amp;ndash;
 然而都没有通过，最终无实习经历。  &amp;ndash;
 秋招投递公司：腾讯、阿里巴巴、网易、字节跳动  &amp;ndash;
 Offer：网易雷火 游戏研发工程师（客户端方向）   求职经历分享 &amp;ndash;
 应聘全流程：  &amp;ndash;
8月2日 笔试
&amp;ndash;
8月6日 一面+二面</description>
    </item>
    
    <item>
      <title>咖啡杯测教学</title>
      <link>https://sphinxxx1984.github.io/slides/coffee_cupping/</link>
      <pubDate>Sun, 08 Nov 2020 21:55:00 +0800</pubDate>
      
      <guid>https://sphinxxx1984.github.io/slides/coffee_cupping/</guid>
      <description>什么是杯测 &amp;ndash;
在一些相对固定的萃取条件下，我们通过品尝咖啡，使用一些风味描述词汇去表达品饮时的嗅觉、味觉体验，对咖啡豆的干湿香、触感、风味等10项标准进行打分，最终给出一个分数。
&amp;ndash;
市面上的精品咖啡，一般都是杯测分数达到80+的咖啡。杯测分数达到90+的咖啡，往往能卖出不错的价钱。
 杯测的流程 &amp;ndash;
 准备工作：
咖啡豆、水、杯测表
杯测碗、杯测勺、玻璃杯、电热水壶、计时器、电子秤  &amp;ndash;
杯测需要在安静、干净的场所进行，同时应尽量关闭手机，避免外界的打扰。
 杯测的流程 &amp;ndash;
  水温：93℃-94℃
  水质：TDS在125ppm-175ppm之间，不应低于75ppm或高于250ppm
  研磨度：20目筛网 通过率为70%-75%
  粉水比：约1：18.18（8.25g粉:150ml水）
  &amp;ndash;
同一支豆子，应准备至少五杯。
 杯测的流程 &amp;ndash;
 STEP1 研磨，嗅闻干香  &amp;ndash;
 STEP2 注水，静置浸泡4分钟  &amp;ndash;
 STEP3 破渣、捞渣，嗅闻湿香  &amp;ndash;
 STEP4 待降温后，啜吸品饮（较热 / 温 / 凉）  &amp;ndash;
 STEP5 填写杯测表进行评价   杯测评分标准 &amp;ndash;
 干香(Fragrance)/湿香(Aroma)  &amp;ndash;</description>
    </item>
    
    <item>
      <title>咖啡冲煮教学</title>
      <link>https://sphinxxx1984.github.io/slides/pour-over_coffee/</link>
      <pubDate>Sat, 24 Oct 2020 22:00:00 +0800</pubDate>
      
      <guid>https://sphinxxx1984.github.io/slides/pour-over_coffee/</guid>
      <description>咖啡的品饮 &amp;ndash;
风味是一个笼统的概念，它实际上包括挥发性的香气、水溶性的味道和触感
&amp;ndash;
 香气：鼻前嗅觉（鼻子嗅闻）/鼻前嗅觉（通过口腔进入鼻腔）  &amp;ndash;
 水溶性的味道：酸、甜、苦共同作用  &amp;ndash;
 触感：厚薄度（Body），清爽还是浓稠  &amp;ndash;
嗅觉和味觉会共同作用
&amp;ndash;
香气、味道、触感共同构成了一种整体印象，我们把它称之为“风味”，通常用与之有关联/类似的东西来描述
 如何描述风味 &amp;ndash;
一般使用咖啡风味轮
&amp;ndash;
但是原版咖啡风味轮太复杂了，不适合初学者参考
&amp;ndash;
 几个主要的方向：花、水果、草本、坚果、焦糖、巧克力、辛香  &amp;ndash;
今天可能会使用到的风味词汇  花香、蜂蜜甜感、焦糖甜感、柑橘、莓果、热带水果、酒韵  &amp;ndash;
咖啡的品饮要求饮者平时多去使用味觉和嗅觉，获得各种各样的体验，才能在喝咖啡时产生相应的词汇联想
 咖啡冲煮的框架与思路 &amp;ndash;
咖啡萃取的目标：尽可能多地从咖啡豆中萃取正面的风味物质，同时不萃取过多的负面风味物质
&amp;ndash;
 总体来说，正面的物质萃取速率较快，负面的物质萃取速率较慢  &amp;ndash;
 所以萃取的时间要适宜，不宜过长（过萃），也不宜过短（萃取不足）  &amp;ndash;
咖啡冲煮中的变量：
&amp;ndash;
 水温  &amp;ndash;
 研磨度  &amp;ndash;
 滤杯  &amp;ndash;
 注水方式（空间分布、速率）  &amp;ndash;
 咖啡冲煮的一般流程 &amp;ndash;</description>
    </item>
    
    <item>
      <title>Mitsuba编译安装踩坑记</title>
      <link>https://sphinxxx1984.github.io/blog/mitsuba/</link>
      <pubDate>Thu, 15 Oct 2020 15:30:00 +0800</pubDate>
      
      <guid>https://sphinxxx1984.github.io/blog/mitsuba/</guid>
      <description>Introduction 简单记录下我前面两天（13、14日）编译Mitsuba1&amp;amp;Mitsuba2的踩坑过程。
1 Mitsuba是什么 Mitsuba的主页在这里：link
简单来说，Mitsuba是一个面向图形学研究的渲染器，用来快速地验证自己的想法，主打的是容易上手、正确性有保障。
更新到Mitsuba2之后，主要增加了retargetable和differentiable两大特性。更多的介绍可以去看闫令琪大神的知乎回答。
如何评价Mitsuba2渲染器? - 闫令琪的回答 - 知乎
2 Windows下Mitsuba2的编译安装 Requirements for Mitsuba2 cmakePython3(&amp;gt;=3.6)Visual Studio 2019 2.1 get codes 首先把代码下载到本地：
git clone --recursive git@github.com:mitsuba-renderer/mitsuba2.git 如果忘了加上&amp;ndash;recursive选项，需要用下面的命令更新submodule：
git submodule update --init --recursive 但是实际操作中，这样更新会出一些小问题（某些子模块不太服帖）。所以还是推荐按照第一个指令进行代码的获取。
2.2 cmake 在..\mitsuba\目录下，运行cmake：
cmake -G &amp;quot;Visual Studio 16 2019&amp;quot; -A x64 等待cmake执行完毕后，会出现一个mitsuba.sln文件。
2.3 生成 用VS2019打开项目文件mitsuba.sln，修改选项为Release，生成解决方案。
等到生成完毕后，可以在mitsuba\dist\目录下找到mitsuba.exe，即代表生成成功。
在mitsuba\resources\data\scenes下面有一些可供测试的xml文件，按照如下的命令：
.\mitsuba.exe 1111.xml 即可渲染对应的文件。注意不要乱动文件目录，这些xml文件是有对应的依赖的。
如果希望能在任意位置使用mitsuba，可以将mitsuba.exe所在的目录添加至环境变量的path中。
3 Windows下Mitsuba1(0.6)的编译安装 Mitsuba0.6有些年久失修了，整个编译安装的过程非常之痛苦。
Requirements for Mitsuba0.6 Python3(&amp;gt;=3.6)BoostPython2.</description>
    </item>
    
    <item>
      <title>邮件自动分类与数据挖掘</title>
      <link>https://sphinxxx1984.github.io/slides/text_mining/</link>
      <pubDate>Mon, 14 Sep 2020 07:44:00 +0800</pubDate>
      
      <guid>https://sphinxxx1984.github.io/slides/text_mining/</guid>
      <description>PART ONE 背景分析 邮件分类问题属于文本类的数据挖掘。所谓文本分类，是指对所给出的文本，给出预定义的一个或多个类别标号，对文本进行准确、高效的分类。在本任务中，文本的类别有20种。
一般来说，传统的文本分类过程由以下几个步骤组成：数据预处理、文本特征选择、特征降维、训练分类器和分类性能评估。
 PART TWO 实现思路 STEP1 数据预处理 STEP2 文本特征提取 我们计算单词TF-IDF值的方式来表示一个邮件的文本特征。 而在计算文本TF和IDF的过程中，同时对数据进行处理，筛掉一部分不需要的单词。
共使用了5个job来实现，分别是：
1.计算单词的TF值
2.计算单词的IDF值
3.计算单词的TF-IDF值并生成稀疏向量（&amp;lt;单词索引 单词TF-IDF值&amp;gt;）
4.输出IDF表中的单词和索引（用于查找配对）
5.将3中的稀疏向量的TF-IDF值替换为1并输出（用于朴素贝叶斯）
定义了一个数据结构KeyWord用来记录文件名，文件夹名（类别标记），单词。
 1.TfJob 计算单词的TF值 输入：停词表 数据集
输出：filename,word,dictName TF
Mapper
在setup中加载停词表（通过addCacheFile的方式加载）
Map过程如下：
(1) 去除掉分隔符
(2) 通过StandardAnalyzer分词器进行分词
(3) 将分好的单词再次筛选，去除单个字母和带数字的单词
(4) 每个KeyWord词频为1，输出
在cleanup中输出&amp;lt;__wordNum__, 单词总数&amp;gt;
 1.TfJob 计算单词的TF值 Combiner
(1) 将Mapper中输出的&amp;lt;KeyWord, 1&amp;gt;进行求和
(2) 输出&amp;lt;KeyWord, 总次数&amp;gt;
Reducer
文档可能超过split尺寸大小，被拆分在多个split被多个Map统计单词数。
Reduce过程如下：
(1) 对各个Map统计的单词总数进行汇总
(2) 使用公式计算单词的TF值，按格式输出
 2.IdfJob 计算单词的IDF值 输入：job1的结果
输出：word IDF
通过上一个job的输出统计每个单词出现的文档数
通过hadoop.hdfs的API获得输入文档的总数
从而利用公式计算IDF
 2.</description>
    </item>
    
    <item>
      <title>一些经典机器学习分类算法的介绍</title>
      <link>https://sphinxxx1984.github.io/blog/some_ml_algorithms/</link>
      <pubDate>Tue, 08 Sep 2020 07:35:00 +0800</pubDate>
      
      <guid>https://sphinxxx1984.github.io/blog/some_ml_algorithms/</guid>
      <description>Introduction 分类是什么，怎么样分类呢？分类是什么意思出自哪里？为什么一瞬间就有好多人进行分类？为什么大家都在分类？相信不少同学都想了解这个操作，下面就让小编来为大家介绍一下怎么推导经典的分类算法的详细内容。
1 J4.8(C4.5) 决策树(dicision tree)是一种常见的机器学习方法。以二分类任务为例，我们希望从给定训练数据集学得一个模型用以对新示例进行分类，这个把样本分类的任务，可看作对“当前样本属于正类吗？”这个问题的“决策”或“判定”过程。
顾名思义，决策树是基于树结构来进行决策的。决策过程中提出的每个判定问题都是对某个属性的“测试”，每个测试的结果或是导出最终结论，或是导出进一步的判定问题，其考虑范围是在上次决策结果的限定范围之内。决策过程的最终结论对应了我们所希望的判定结果。
一般地，一棵决策树包含一个根结点、若干个内部结点和若干个叶结点；叶结点对应于决策结果，其他每个结点则对应于一个属性测试；每个结点包含的样本集合根据属性测试的结果被划分到子结点中；根结点包含样本全集。从根结点到每个叶结点的路径对应了一个判定测试序列。
决策树学习的目的是为了产生一棵泛化能力强，即处理未见示例能力强的决策树，其基本流程遵循简单而直观的分治策略：自根至叶的一个递归过程，在每个中间结点寻找一个“划分”(split or test)属性。决策树的学习有3种停止条件：当前结点包含的样本全属于同一类别，无需划分；当前属性集为空，或是所有样本在所有属性上取值相同，无法划分；当前结点包含的样本集合为空，不能划分。
在ID3算法中，使用信息增益(information gain)来选择最优划分属性。 计算公式为: $$\text{Ent}(D) = - \sum_{k = 1}^{|y|}p_{k}\log_{2}p_{k}(if\ p_k = 0,\ p_{k}\log_{2}p_{k} = 0) \ \ (1.1)$$ $$\text{Gain}(D, a) = \text{Ent}(D) - \sum_{v = 1}^{V}\frac{|D^v|}{|D|}\text{Ent}(D^v) \ \ (1.2)$$ ID3算法在实际应用中存在问题：对于可取值数目较多的属性有偏好。Quinlan又在1993年提出了改进版本C4.5算法，使用增益率(gain ratio)来选择最优划分属性。 计算公式为: $$\text{IV}(a) = - \sum_{v = 1}^{V}\frac{|D^v|}{|D|}\log_2\frac{|D^v|}{|D|} \ \ (1.3)$$
$$\text{Gain_ratio}(D, a) = \frac{\text{Gain}(D, a)}{\text{IV}(a)} \ \ (1.4)$$其中IV(a)称为属性a的“固有值”(intrinsic value)。属性a的可能取值数目越多（即V越大），则IV(a)的值通常会越大。 需要注意的是，增益率准则对可取值数目较少的属性有所偏好，因此，C4.5算法并不是直接选择增益率最大的候选划分属性，而是使用了一个启发式：先从候选划分属性中找出信息增益高于平均水平的属性，再从中选择增益率最高的。
此外，C4.5算法还在以下几方面对ID3算法有所改进：预剪枝处理、连续值处理（二分法）、缺失值处理。
C4.5算法产生的分类规则容易理解且准确率较高。但是，在构造决策树的过程中，C4.5算法需要对数据集进行多次的顺序扫描和排序，导致算法的效率比较低下。当数据集的大小超过内存时。C4.5算法是无法运行的。
C4.5在Weka中的实现为J4.8。
2 Naïve Bayes 贝叶斯决策论(Bayesian decision theory)是概率框架下实施决策的基本方法。对分类任务来说，在所有相关概率都已知的理想情形下，贝叶斯决策论考虑如何基于这些概率和误判损失来选择最优的类别表及。下面以多分类任务为例解释其基本原理。</description>
    </item>
    
    <item>
      <title>第一篇文章</title>
      <link>https://sphinxxx1984.github.io/blog/first_post/</link>
      <pubDate>Tue, 08 Sep 2020 01:21:00 +0800</pubDate>
      
      <guid>https://sphinxxx1984.github.io/blog/first_post/</guid>
      <description>写在开博客之前 大概在2年半前的一个冬夜，我开了个人的微信公众号，以非常不稳定的频率更新了一年半，内容主要是音乐、个人随笔与咖啡知识。
从去年八月到现在，我都没有在个人的公众号上更新文章，大致原因有二，第一是现实生活过于充实、忙碌，没有闲工夫写东西。第二是深感国内互联网舆论环境之差，一度丧失了表达的欲望。
到2020年的9月，我终于闲了下来，可以安下心地在电脑前码字，分享个人的心得与一些想法。
本博客的用途 本博客和本人的公众号大致形成一种互补的关系，但也不排除交叉的可能性。公众号可能更加偏向非技术的内容一些，博客可能偏向技术性的内容一些。
本人的联系方式 QQ：365248110
手机：15950926782
微信：同手机号
微信公众号：Sphinxxx
微博：CoDe_BlooD
Twitter：@sphinxxx1984
PS：加好友时请备注姓名</description>
    </item>
    
    <item>
      <title>友情链接</title>
      <link>https://sphinxxx1984.github.io/friends/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sphinxxx1984.github.io/friends/</guid>
      <description>doowzs(Tianyun Zhang)
Forewing
Sciroccogti(Yifan Zhang)
Fermat(Zangwei Zheng)</description>
    </item>
    
  </channel>
</rss>