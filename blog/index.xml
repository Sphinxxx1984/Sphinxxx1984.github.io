<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on CoDeBlooD Blog</title>
    <link>https://sphinxxx1984.github.io/blog/</link>
    <description>Recent content in Blogs on CoDeBlooD Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ch-Hans</language>
    <copyright>@2020, Xinyu Ye. All rights reserved.</copyright>
    <lastBuildDate>Tue, 09 Feb 2021 18:20:00 +0800</lastBuildDate>
    
	<atom:link href="https://sphinxxx1984.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Gamker&#39;s Note 01</title>
      <link>https://sphinxxx1984.github.io/blog/gamkers-note-01/</link>
      <pubDate>Tue, 09 Feb 2021 18:20:00 +0800</pubDate>
      
      <guid>https://sphinxxx1984.github.io/blog/gamkers-note-01/</guid>
      <description>Introduction 这会是一个长期更新的系列，以笔记的形式记载我对游戏开发的一些粗浅的认知和理解。除了程序（我的本职），也会交代一些我对其他岗位的工作的看法。
1 游戏开发是一种什么样的工作 简单而言，游戏开发和其他类型的商业软件开发在本质上是没有区别的，都是根据需求来编写程序、完成任务。
从一个开发者的角度，不同点主要体现在以下方面：
   软件规模更加庞大
其他类型的商业软件，代码量和资源量在通常情况下都无法与游戏相提并论。    更加复杂的变化
与其他软件相比，游戏中产生变化的可能性更大，产生变化的节奏更快，变化的种类更多。    性能要求
游戏对于计算机（或其他设备）硬件的要求通常高于一些常规的软件，会占用大量的CPU、GPU和内存资源。不同的玩家，拥有的这些硬件资源是有着显著的不同的。    2 游戏开发中一些应当被遵守的准则    不要写难以维护和修改的代码
在你的游戏中可能存在很多的常量，你的逻辑代码可能与它们产生了过强的耦合（尤其是条件判断中的一些常量）。如果你要对它们进行管理与修改，会是一件非常痛苦的工作。
逻辑与常量的强耦合在任何时刻都是应当避免的，如果一定要这样做，需要有能快速定位、修改这些常量的方法。建议在开发的早期就维护好一个工具，对游戏中的常量进行维护和管理。    统一命名标准
游戏的代码中会存在非常多的接口和全局变量。对于个人开发者而言，你可能非常熟悉自己的命名方式，不会有找不到东西的困惑感。
对于一个多人的游戏开发团队，务必要把命名标准制定下来，在有必要时维护一个实时更新的文档。易读、统一的命名方式会给他人的工作带来极大的便利。    时刻考虑代码执行的效率
对于软件开发的老手而言，这一点可能一直是考量的目标。
一个游戏的规模是非常庞大的，开发、维护的时间跨度也非常大。一些代码的执行效率在数据量不大的时候可能没有问题，但在数据规模逐渐增长后会变得令人难以容忍。
为了避免这种情况，我们要谨慎地使用一些时间复杂度达到O(n^2)及以上的代码逻辑，保证游戏的交互、响应时间能在玩家可接受的范围内（这个时间一般是0.3s左右）。    </description>
    </item>
    
    <item>
      <title>Mitsuba编译安装踩坑记</title>
      <link>https://sphinxxx1984.github.io/blog/mitsuba/</link>
      <pubDate>Thu, 15 Oct 2020 15:30:00 +0800</pubDate>
      
      <guid>https://sphinxxx1984.github.io/blog/mitsuba/</guid>
      <description>Introduction 简单记录下我前面两天（13、14日）编译Mitsuba1&amp;amp;Mitsuba2的踩坑过程。
1 Mitsuba是什么 Mitsuba的主页在这里：link
简单来说，Mitsuba是一个面向图形学研究的渲染器，用来快速地验证自己的想法，主打的是容易上手、正确性有保障。
更新到Mitsuba2之后，主要增加了retargetable和differentiable两大特性。更多的介绍可以去看闫令琪大神的知乎回答。
如何评价Mitsuba2渲染器? - 闫令琪的回答 - 知乎
2 Windows下Mitsuba2的编译安装 Requirements for Mitsuba2 cmakePython3(&amp;gt;=3.6)Visual Studio 2019 2.1 get codes 首先把代码下载到本地：
git clone --recursive git@github.com:mitsuba-renderer/mitsuba2.git 如果忘了加上&amp;ndash;recursive选项，需要用下面的命令更新submodule：
git submodule update --init --recursive 但是实际操作中，这样更新会出一些小问题（某些子模块不太服帖）。所以还是推荐按照第一个指令进行代码的获取。
2.2 cmake 在..\mitsuba\目录下，运行cmake：
cmake -G &amp;quot;Visual Studio 16 2019&amp;quot; -A x64 等待cmake执行完毕后，会出现一个mitsuba.sln文件。
2.3 生成 用VS2019打开项目文件mitsuba.sln，修改选项为Release，生成解决方案。
等到生成完毕后，可以在mitsuba\dist\目录下找到mitsuba.exe，即代表生成成功。
在mitsuba\resources\data\scenes下面有一些可供测试的xml文件，按照如下的命令：
.\mitsuba.exe 1111.xml 即可渲染对应的文件。注意不要乱动文件目录，这些xml文件是有对应的依赖的。
如果希望能在任意位置使用mitsuba，可以将mitsuba.exe所在的目录添加至环境变量的path中。
3 Windows下Mitsuba1(0.6)的编译安装 Mitsuba0.6有些年久失修了，整个编译安装的过程非常之痛苦。
Requirements for Mitsuba0.6 Python3(&amp;gt;=3.6)BoostPython2.</description>
    </item>
    
    <item>
      <title>一些经典机器学习分类算法的介绍</title>
      <link>https://sphinxxx1984.github.io/blog/some_ml_algorithms/</link>
      <pubDate>Tue, 08 Sep 2020 07:35:00 +0800</pubDate>
      
      <guid>https://sphinxxx1984.github.io/blog/some_ml_algorithms/</guid>
      <description>Introduction 分类是什么，怎么样分类呢？分类是什么意思出自哪里？为什么一瞬间就有好多人进行分类？为什么大家都在分类？相信不少同学都想了解这个操作，下面就让小编来为大家介绍一下怎么推导经典的分类算法的详细内容。
1 J4.8(C4.5) 决策树(dicision tree)是一种常见的机器学习方法。以二分类任务为例，我们希望从给定训练数据集学得一个模型用以对新示例进行分类，这个把样本分类的任务，可看作对“当前样本属于正类吗？”这个问题的“决策”或“判定”过程。
顾名思义，决策树是基于树结构来进行决策的。决策过程中提出的每个判定问题都是对某个属性的“测试”，每个测试的结果或是导出最终结论，或是导出进一步的判定问题，其考虑范围是在上次决策结果的限定范围之内。决策过程的最终结论对应了我们所希望的判定结果。
一般地，一棵决策树包含一个根结点、若干个内部结点和若干个叶结点；叶结点对应于决策结果，其他每个结点则对应于一个属性测试；每个结点包含的样本集合根据属性测试的结果被划分到子结点中；根结点包含样本全集。从根结点到每个叶结点的路径对应了一个判定测试序列。
决策树学习的目的是为了产生一棵泛化能力强，即处理未见示例能力强的决策树，其基本流程遵循简单而直观的分治策略：自根至叶的一个递归过程，在每个中间结点寻找一个“划分”(split or test)属性。决策树的学习有3种停止条件：当前结点包含的样本全属于同一类别，无需划分；当前属性集为空，或是所有样本在所有属性上取值相同，无法划分；当前结点包含的样本集合为空，不能划分。
在ID3算法中，使用信息增益(information gain)来选择最优划分属性。 计算公式为: $$\text{Ent}(D) = - \sum_{k = 1}^{|y|}p_{k}\log_{2}p_{k}(if\ p_k = 0,\ p_{k}\log_{2}p_{k} = 0) \ \ (1.1)$$ $$\text{Gain}(D, a) = \text{Ent}(D) - \sum_{v = 1}^{V}\frac{|D^v|}{|D|}\text{Ent}(D^v) \ \ (1.2)$$ ID3算法在实际应用中存在问题：对于可取值数目较多的属性有偏好。Quinlan又在1993年提出了改进版本C4.5算法，使用增益率(gain ratio)来选择最优划分属性。 计算公式为: $$\text{IV}(a) = - \sum_{v = 1}^{V}\frac{|D^v|}{|D|}\log_2\frac{|D^v|}{|D|} \ \ (1.3)$$
$$\text{Gain_ratio}(D, a) = \frac{\text{Gain}(D, a)}{\text{IV}(a)} \ \ (1.4)$$其中IV(a)称为属性a的“固有值”(intrinsic value)。属性a的可能取值数目越多（即V越大），则IV(a)的值通常会越大。 需要注意的是，增益率准则对可取值数目较少的属性有所偏好，因此，C4.5算法并不是直接选择增益率最大的候选划分属性，而是使用了一个启发式：先从候选划分属性中找出信息增益高于平均水平的属性，再从中选择增益率最高的。
此外，C4.5算法还在以下几方面对ID3算法有所改进：预剪枝处理、连续值处理（二分法）、缺失值处理。
C4.5算法产生的分类规则容易理解且准确率较高。但是，在构造决策树的过程中，C4.5算法需要对数据集进行多次的顺序扫描和排序，导致算法的效率比较低下。当数据集的大小超过内存时。C4.5算法是无法运行的。
C4.5在Weka中的实现为J4.8。
2 Naïve Bayes 贝叶斯决策论(Bayesian decision theory)是概率框架下实施决策的基本方法。对分类任务来说，在所有相关概率都已知的理想情形下，贝叶斯决策论考虑如何基于这些概率和误判损失来选择最优的类别表及。下面以多分类任务为例解释其基本原理。</description>
    </item>
    
    <item>
      <title>第一篇文章</title>
      <link>https://sphinxxx1984.github.io/blog/first_post/</link>
      <pubDate>Tue, 08 Sep 2020 01:21:00 +0800</pubDate>
      
      <guid>https://sphinxxx1984.github.io/blog/first_post/</guid>
      <description>写在开博客之前 大概在2年半前的一个冬夜，我开了个人的微信公众号，以非常不稳定的频率更新了一年半，内容主要是音乐、个人随笔与咖啡知识。
从去年八月到现在，我都没有在个人的公众号上更新文章，大致原因有二，第一是现实生活过于充实、忙碌，没有闲工夫写东西。第二是深感国内互联网舆论环境之差，一度丧失了表达的欲望。
到2020年的9月，我终于闲了下来，可以安下心地在电脑前码字，分享个人的心得与一些想法。
本博客的用途 本博客和本人的公众号大致形成一种互补的关系，但也不排除交叉的可能性。公众号可能更加偏向非技术的内容一些，博客可能偏向技术性的内容一些。
本人的联系方式 QQ：365248110
手机：15950926782
微信：同手机号
微信公众号：Sphinxxx
微博：CoDe_BlooD
Twitter：@sphinxxx1984
PS：加好友时请备注姓名</description>
    </item>
    
  </channel>
</rss>